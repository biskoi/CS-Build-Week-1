{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["styled","canvas","interval","Gridcontainer","div","Cell","App","make2DArray","cols","rows","arr","Array","i","fill","grid","useState","gridData","setGridData","running","setRunning","gen","setGen","mode","setMode","gridRef","useRef","current","gridStep","g","operations","nextGrid","console","log","j","neighbors","forEach","vert","hori","newVert","newHori","stop","clearInterval","modeHandler","newGrid","table","cellToggle","fillGrid","gliderGrid","x","y","newX","newY","glider","exploderGrid","exploder","className","map","item","subItem","undefined","onClick","e","setInterval","randomGrid","Math","random","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9dfc5619.chunk.js","sourcesContent":["import React, {useRef, useState, useEffect} from 'react';\nimport './App.css';\nimport styled from 'styled-components';\n\nconst Canvas = styled.canvas`\nborder: solid pink 2px;\nwidth: 80%;\nheight: 60vh;\n`;\n\nconst Gridcontainer = styled.div`\ndisplay: inline-grid;\nborder: solid pink 1px;\ngrid-template-columns: repeat(40, 2.5%);\n`;\n\nconst Cell = styled.div`\nheight: 15px;\nwidth: 15px;\nborder: dotted pink 1px\n`;\n\nlet interval;\n\nfunction App() {\n  \n  const colNums = 40;\n  const rowNums = 40;\n\n  const make2DArray = (cols, rows) => {\n    let arr = new Array(rows);\n    for (let i = 0; i < cols; i++) {\n      arr[i] = new Array(colNums).fill(0);\n    };\n\n    return arr\n  };\n\n  let grid = make2DArray(colNums, rowNums); \n  \n  const [gridData, setGridData] = useState(grid);\n  const [running, setRunning] = useState(false);\n  const [gen, setGen] = useState(0)\n  const [mode, setMode] = useState('TOGGLE');\n  const gridRef = useRef();\n  gridRef.current = gridData;\n\n  const gridStep = () => {\n    // [vertical, horizontal]\n    // [0, 0] = top left\n    // [0, 39] = top right\n    // [39, 39] = bottom right\n    // [39, 0] = bottom left\n    setGen(g => g + 1)\n    const operations = [\n      [0, -1],\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, 1],\n      [1, 1],\n      [1, 0],\n      [1, -1]\n    ];\n\n    let nextGrid = make2DArray(colNums, rowNums);\n    // console.log('grid before step', gridRef.current)\n    // console.log('next grid before operations are done', nextGrid)\n    console.log('step')\n\n    for (let i = 0; i < 40; i++) {\n      for (let j = 0; j < 40; j++) {\n        let neighbors = 0;\n\n        operations.forEach(([vert, hori]) => {\n          let newVert = i + vert;\n          let newHori = j + hori;\n\n          if (newVert >= 0 && newVert <= 39 && newHori >= 0 && newHori <= 39) {\n            neighbors += gridRef.current[newVert][newHori]\n            // nextGrid[newVert][newHori] = 1\n          };\n        });\n\n        if (gridRef.current[i][j] === 1) {\n          // if cell is alive already\n          if (neighbors < 2 || neighbors > 3) {\n            nextGrid[i][j] = 0\n            // console.log('killed cell', i, j, neighbors)\n          }else if (neighbors === 2 || neighbors === 3) {\n            nextGrid[i][j] = 1\n          }\n        };\n\n        if (gridRef.current[i][j] === 0 && neighbors === 3) {\n          nextGrid[i][j] = 1\n        };\n      };\n    };\n    // console.log('old grid', gridRef.current)\n    // console.log('new grid after ops', nextGrid)\n    setGridData(nextGrid)\n  };\n  \n  const startRender = () => {\n    gridStep();\n    interval = setInterval(gridStep, 200);\n    console.log(`running from loop is ${running}`);\n  };\n\n  const start = () => {\n    if (!running) {\n\n      setRunning(true)\n      startRender();\n    };\n\n  };\n\n  const stop = () => {\n    console.log(`stopping`)\n    setRunning(false)\n    clearInterval(interval)\n  };\n\n  const cellToggle = (i, j) => {\n\n    if (running) {\n      return;\n    }\n    const newGrid = [...gridRef.current];\n    if (gridRef.current[i][j]) {\n      // let split = e.target.className.split(' ');\n      // e.target.className = `${split[0]} ${split[1]}`;\n      newGrid[i][j] = 0;\n\n    } else if (!gridRef.current[i][j]) {\n      // e.target.className = `${e.target.className} ${'filled'}`;\n      newGrid[i][j] = 1;\n    };\n\n    setGridData(newGrid)\n    console.table(newGrid)\n    console.log(i, j, 'val:', newGrid[i][j])\n    console.log(newGrid[i])\n\n  };\n\n  const fill = (i, j) => {\n    let fillGrid = [...gridData];\n\n    const operations = [\n      [0, -1],\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, 1],\n      [1, 1],\n      [1, 0],\n      [1, -1]\n    ];\n\n    operations.forEach(([vert, hori]) => {\n      let newVert = i + vert;\n      let newHori = j + hori;\n\n      if (newVert >= 0 && newVert <= 39 && newHori >= 0 && newHori <= 39) {\n        // neighbors += gridRef.current[newVert][newHori]\n        // nextGrid[newVert][newHori] = 1\n        fillGrid[newVert][newHori] = 1\n      };\n    });\n    setGridData(fillGrid)\n  };\n\n  const clearGrid = () => {\n    stop();\n    setGridData(grid)\n    setGen(0)\n  };\n\n  const randomFill = () => {\n    const randomGrid = make2DArray(colNums, rowNums);\n    for (let i = 0; i < 40; i++) {\n      for (let j = 0; j < 40; j++) {\n        let num = Math.random()\n        if (num > 0.75) {\n          randomGrid[i][j] = 1\n        }\n      };\n    };\n    setGridData(randomGrid);\n    setGen(0)\n  };\n\n  const glider = (i, j) => {\n    let gliderGrid = [...gridData];\n\n    const gliderOps = [\n      [0, 1],\n      [-1, 0],\n      [1, -1],\n      [1, 0],\n      [1, 1]\n    ];\n\n    gliderOps.forEach(([x, y]) => {\n      let newX = i + x;\n      let newY = j + y;\n\n      if (newX >= 0 && newX <= 39 && newY >= 0 && newY <= 39) {\n        gliderGrid[newX][newY] = 1;\n      };\n\n    });\n\n    setGridData(gliderGrid)\n  };\n\n  const exploder = (i, j) => {\n    let exploderGrid = [...gridData];\n\n    const exploderOps = [\n      [-2, -2],\n      [0, -2],\n      [2, -2],\n      [-2, -1],\n      [2, -1],\n      [-2, 0],\n      [2, 0],\n      [-2, 1],\n      [2, 1],\n      [0, 2],\n      [2, 2],\n      [-2, 2],\n    ];\n\n    exploderOps.forEach(([x, y]) => {\n      let newX = x + i;\n      let newY = y + j;\n\n      if (newX >= 0 && newX <= 39 && newY >= 0 && newY <= 39) {\n        exploderGrid[newX][newY] = 1;\n      };\n    });\n\n    setGridData(exploderGrid);\n  };\n\n  const modeHandler = (i, j) => {\n    switch (mode) {\n\n      case 'TOGGLE':\n        return cellToggle(i, j);\n    \n      case 'BORDER_FILL':\n        return fill(i, j);\n\n      case 'GLIDER':\n        return glider(i, j);\n\n      case 'EXPLODER':\n        return exploder(i, j);\n\n      default:\n        break;\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n\n      <h1>\n        John Conway's Game of Life\n      </h1>\n      <div className = 'flexRow'>\n        <div className = 'gameContainer'>\n\n          <div className = 'gameGrid'>\n\n            <Gridcontainer>\n              {gridData.map((item, i) => {\n                return item.map((subItem, j) => {\n                  return <Cell className = {subItem ? 'filled' : undefined} onClick = {(e) => modeHandler(i, j)}>\n                  </Cell>\n                })\n              })}\n            </Gridcontainer>\n\n          </div>\n          <div className = 'flexRow'>\n\n          <div className = 'controls'>\n            <p>\n              {`Generation: ${gen}`}\n            </p>\n            <button onClick = {start}>\n              Start\n            </button>\n            <button onClick = {stop}>\n              Stop\n            </button>\n            <button onClick = {gridStep}>\n              Step\n            </button>\n            <button onClick = {clearGrid}>\n              Clear\n            </button>\n            <button onClick = {randomFill}>\n              Random\n            </button>\n          </div>\n          <div className = 'controls fills'>\n            <p>\n              Fill Mode: {`${mode}`}\n            </p>\n            <button onClick = {() => {setMode('TOGGLE')}}>\n              Toggle\n            </button>\n            <button onClick = {() => {setMode('BORDER_FILL')}}>\n              Border Fill\n            </button>\n            <button onClick = {() => {setMode('GLIDER')}}>\n              Glider\n            </button>\n            <button onClick = {() => {setMode('EXPLODER')}}>\n              Exploder\n            </button>\n          </div>\n          </div>\n        </div>\n        <div className = 'info'>\n          <div className = 'about'>\n            <h3>\n              About\n            </h3>\n            <p>\n              John Conway's Game of Life is an example of a <a href = 'https://www.conwaylife.com/wiki/Cellular_automaton'>cellular automaton.</a> \n              Cells displayed on the grid can either be alive or dead, and are influenced by their <a href = 'https://en.wikipedia.org/wiki/Moore_neighborhood'>neighborhood,</a> or the cells surrounding them. \n              The way in which they are influenced is described by a set of rules, producing a new set of data, or generation, to be displayed.\n            </p>\n            <p>\n              The game is a <a href = 'https://en.wikipedia.org/wiki/Zero-player_game'>zero-player game,</a> so all that the \"player\" has to do is set the initial state, and watch as the patterns evolve according to the rules of life.\n            </p>\n            <p>\n              In this simulation, we're holding two datasets: the current grid, and the next grid to be displayed. The next grid comes from performing checks on every single cell in the current grid to decide if it will be alive or dead in the next iteration, and the old grid is then swapped with the new grid as we step through the generations.\n              <br/>The edges of the grid are treated as permanently dead cells, and do not wrap around to the other side of the grid. If you want your cells to stay alive, try to keep things closer to the middle.\n            </p>\n          </div>\n          <div className = 'rules'>\n\n            <h3>\n            Rules\n            </h3>\n\n            <li>If a live cell has less than 2 or more than 3 neighbors, it dies.</li>\n            <li>If a live cell has 2 or 3 neighbors, it lives on to the next generation.</li>\n            <li>If a dead cell has 3 live neighbors, it will be brought to life.</li>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}